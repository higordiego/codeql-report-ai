name: Release Multi-Architecture Build

on:
  release:
    types: [published]   # dispara quando você publica uma Release no GitHub
  workflow_dispatch:     # permite rodar manualmente se quiser

env:
  BIN_NAME: codeql-ai    # nome do binário do projeto

jobs:
  build-multiarch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64-unknown-linux-musl, aarch64-unknown-linux-musl]
        include:
          - target: x86_64-unknown-linux-musl
            arch: x86_64
            docker_image: ekidd/rust-musl-builder:stable
          - target: aarch64-unknown-linux-musl
            arch: aarch64
            docker_image: clux/muslrust:stable-openssl

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show tag/version
        run: |
          echo "Release tag: ${{ github.event.release.tag_name }}"
          echo "Target: ${{ matrix.target }}"
          git describe --tags --always || true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            ${{ runner.os }}-cargo-

      - name: Pull docker image
        run: docker pull ${{ matrix.docker_image }}

      - name: Build (${{ matrix.target }})
        run: |
          docker run --rm \
            -v "$PWD":/home/rust/src \
            -e CARGO_HOME=/home/rust/.cargo \
            ${{ matrix.docker_image }} \
            cargo build --release --target ${{ matrix.target }}
          ls -lah target/${{ matrix.target }}/release/

      - name: Preparar artefatos
        id: prep
        shell: bash
        run: |
          TAG="${{ github.event.release.tag_name }}"
          if [ -z "$TAG" ]; then
            TAG="$(git describe --tags --always || echo manual)"
          fi

          SRC="target/${{ matrix.target }}/release/${BIN_NAME}"
          OUT="${BIN_NAME}-${TAG}-${{ matrix.target }}"

          test -f "$SRC" || { echo "Binário não encontrado em $SRC"; exit 1; }

          cp "$SRC" "./${OUT}"
          chmod +x "./${OUT}"

          # Checksum
          sha256sum "./${OUT}" | tee "./${OUT}.sha256"

          # Create tar.gz with README
          mkdir -p package
          cp "./${OUT}" package/
          cat > package/README.md << EOF
          # Code Report - ${{ matrix.target }}
          
          ## Installation
          chmod +x ${BIN_NAME} && sudo mv ${BIN_NAME} /usr/local/bin/
          
          ## Usage
          ./${BIN_NAME} -i results.json -p /path/to/project
          
          ## Architecture
          ${{ matrix.target }}
          
          ## Version
          $TAG
          EOF
          
          tar -czf "${OUT}.tar.gz" -C package .

          echo "artifact=${OUT}" >> "$GITHUB_OUTPUT"
          echo "checksum=${OUT}.sha256" >> "$GITHUB_OUTPUT"
          echo "archive=${OUT}.tar.gz" >> "$GITHUB_OUTPUT"

      - name: Anexar na Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ steps.prep.outputs.artifact }}
            ${{ steps.prep.outputs.checksum }}
            ${{ steps.prep.outputs.archive }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
