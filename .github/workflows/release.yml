name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for Multiple Platforms
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        target: [x86_64-unknown-linux-gnu, x86_64-unknown-linux-musl]
        include:
          - target: x86_64-unknown-linux-gnu
            name: linux-x86_64
            archive_name: codeql-ai-linux-x86_64.tar.gz
          - target: x86_64-unknown-linux-musl
            name: linux-x86_64-musl
            archive_name: codeql-ai-linux-x86_64-musl.tar.gz
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
          
      - name: Install target dependencies
        run: |
          sudo apt-get update
          
          # Install basic build tools
          sudo apt-get install -y build-essential pkg-config
          
          # Install OpenSSL development libraries
          sudo apt-get install -y libssl-dev
          
          # Install musl tools for musl targets
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            sudo apt-get install -y musl-tools
            # Install musl-specific development packages
            sudo apt-get install -y musl-dev
          fi
          

          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.target }}-
            
      - name: Build release
        env:
          OPENSSL_DIR: /usr
          OPENSSL_LIB_DIR: /usr/lib/x86_64-linux-gnu
          OPENSSL_INCLUDE_DIR: /usr/include
          OPENSSL_LIBS: ssl:crypto
          OPENSSL_STATIC: 0
        run: |
          # Set up OpenSSL environment
          export OPENSSL_DIR="/usr"
          export OPENSSL_INCLUDE_DIR="/usr/include"
          export OPENSSL_LIBS="ssl:crypto"
          export OPENSSL_STATIC="0"
          
          # Find OpenSSL library directory
          OPENSSL_LIB_DIR=$(find /usr -name "libssl.so*" -type f 2>/dev/null | head -1 | xargs dirname)
          if [[ -z "$OPENSSL_LIB_DIR" ]]; then
            OPENSSL_LIB_DIR="/usr/lib/x86_64-linux-gnu"
          fi
          export OPENSSL_LIB_DIR="$OPENSSL_LIB_DIR"
          
          # For musl targets, use a different approach
          if [[ "${{ matrix.target }}" == *"musl"* ]]; then
            export OPENSSL_STATIC="1"
            export CC="x86_64-linux-musl-gcc"
            export CFLAGS="-I/usr/include"
            export LDFLAGS="-L/usr/lib/x86_64-linux-gnu"
            # Use system OpenSSL for musl
            export OPENSSL_DIR="/usr"
            export OPENSSL_LIB_DIR="/usr/lib/x86_64-linux-gnu"
            export OPENSSL_INCLUDE_DIR="/usr/include"
          fi
          

          
          # Verify OpenSSL installation
          echo "OpenSSL configuration:"
          echo "OPENSSL_DIR: $OPENSSL_DIR"
          echo "OPENSSL_LIB_DIR: $OPENSSL_LIB_DIR"
          echo "OPENSSL_INCLUDE_DIR: $OPENSSL_INCLUDE_DIR"
          echo "OPENSSL_LIBS: $OPENSSL_LIBS"
          echo "OPENSSL_STATIC: $OPENSSL_STATIC"
          
          # Find OpenSSL libraries
          echo "Searching for OpenSSL libraries..."
          find /usr -name "libssl*" -type f 2>/dev/null | head -5
          find /usr -name "libcrypto*" -type f 2>/dev/null | head -5
          
          # Check if OpenSSL libraries exist in expected location
          echo "Checking expected location: $OPENSSL_LIB_DIR"
          ls -la $OPENSSL_LIB_DIR/libssl* 2>/dev/null || echo "libssl not found in $OPENSSL_LIB_DIR"
          ls -la $OPENSSL_LIB_DIR/libcrypto* 2>/dev/null || echo "libcrypto not found in $OPENSSL_LIB_DIR"
          
          cargo build --release --target ${{ matrix.target }}
          
      - name: Create release directory
        run: |
          mkdir -p release/${{ matrix.name }}
          
      - name: Copy binary
        run: |
          cp target/${{ matrix.target }}/release/codeql-ai release/${{ matrix.name }}/codeql-ai
          chmod +x release/${{ matrix.name }}/codeql-ai
          
      - name: Create README for release
        run: |
          cat > release/${{ matrix.name }}/README.md << 'EOF'
          # Code Report - ${{ matrix.name }} Release
          
          ## Installation
          
          ```bash
          # Download and make executable
          chmod +x codeql-ai
          
          # Move to PATH (optional)
          sudo mv codeql-ai /usr/local/bin/codeql-ai
          ```
          
          ## Usage
          
          ```bash
          # Basic usage
          ./codeql-ai -i results.json -p /path/to/project
          
          # With custom output
          ./codeql-ai -i results.json -p /path/to/project -o report.md
          
          # With debug logging
          ./codeql-ai -i results.json -p /path/to/project -v debug
          ```
          
          ## Requirements
          
          - ${{ matrix.name }}
          - No additional dependencies required
          
          ## Version
          
          ${{ github.ref_name }}
          
          Built on: $(date)
          EOF
          
      - name: Create release archive
        run: |
          cd release/${{ matrix.name }}
          tar -czf ../../${{ matrix.archive_name }} *
          
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-release
          path: ${{ matrix.archive_name }}
          
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: List downloaded artifacts
        run: |
          echo "Downloaded artifacts:"
          find artifacts -name "*.tar.gz" -type f
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Code Report ${{ steps.version.outputs.version }}
          body: |
            ## Code Report ${{ steps.version.outputs.version }}
            
            ### 🔍 Advanced Security Analysis Tool
            Powered by AI & Static Analysis
            
            ### 🚀 What's New
            - Professional security analysis with CodeQL + ChatGPT
            - AI-powered vulnerability detection
            - Comprehensive Markdown reports
            - Clean and intuitive CLI interface
            - Multi-platform Linux binaries (x86_64, musl)
            
            ### 📦 Installation
            
            Choose the appropriate binary for your system:
            
            **Linux x86_64 (GNU - Ubuntu, Debian, CentOS):**
            ```bash
            tar -xzf codeql-ai-linux-x86_64.tar.gz
            chmod +x codeql-ai
            ```
            
            **Linux x86_64 (Musl - Alpine Linux, Docker):**
            ```bash
            tar -xzf codeql-ai-linux-x86_64-musl.tar.gz
            chmod +x codeql-ai
            ```
            
            ### 🎯 Quick Start
            
            ```bash
            # Basic analysis
            ./codeql-ai -i results.json -p /path/to/project
            
            # With debug logging
            ./codeql-ai -i results.json -p /path/to/project -v debug
            ```
            
            ### 📋 Features
            
            - 🔍 **Static Analysis**: CodeQL integration
            - 🤖 **AI-Powered**: ChatGPT analysis
            - 📊 **Detailed Reports**: Markdown format
            - 🛡️ **Security Focus**: Vulnerability detection
            - 🎨 **Professional UI**: Colored terminal output
            - 🐧 **Multi-platform**: Linux x86_64, Musl support
            
            ### 🔧 Requirements
            
            - Linux x86_64
            - GNU libc or Musl libc
            - OpenAI API key (optional, uses demo key for testing)
            
            ### 📄 Documentation
            
            Run `./codeql-ai --help` for full usage information.
            
          draft: false
          prerelease: false
          files: |
            artifacts/*/codeql-ai-linux-x86_64.tar.gz
            artifacts/*/codeql-ai-linux-x86_64-musl.tar.gz
          

